// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	domain "btcRate/campaign/domain"

	mock "github.com/stretchr/testify/mock"
)

// IRateProvider is an autogenerated mock type for the IRateProvider type
type IRateProvider struct {
	mock.Mock
}

type IRateProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *IRateProvider) EXPECT() *IRateProvider_Expecter {
	return &IRateProvider_Expecter{mock: &_m.Mock}
}

// GetRate provides a mock function with given fields:
func (_m *IRateProvider) GetRate() (*domain.Rate, error) {
	ret := _m.Called()

	var r0 *domain.Rate
	var r1 error
	if rf, ok := ret.Get(0).(func() (*domain.Rate, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *domain.Rate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Rate)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRateProvider_GetRate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRate'
type IRateProvider_GetRate_Call struct {
	*mock.Call
}

// GetRate is a helper method to define mock.On call
func (_e *IRateProvider_Expecter) GetRate() *IRateProvider_GetRate_Call {
	return &IRateProvider_GetRate_Call{Call: _e.mock.On("GetRate")}
}

func (_c *IRateProvider_GetRate_Call) Run(run func()) *IRateProvider_GetRate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IRateProvider_GetRate_Call) Return(_a0 *domain.Rate, _a1 error) *IRateProvider_GetRate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRateProvider_GetRate_Call) RunAndReturn(run func() (*domain.Rate, error)) *IRateProvider_GetRate_Call {
	_c.Call.Return(run)
	return _c
}

// NewIRateProvider creates a new instance of IRateProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRateProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRateProvider {
	mock := &IRateProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
